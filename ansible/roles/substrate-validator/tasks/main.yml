---
# tasks file for substrate-validator
- name: create substrate service file
  template:
    src: substrate.service.j2
    dest: /etc/systemd/system/substrate.service
    owner: root
    group: root
    mode: 0600

- name: restart substrate service
  shell: |
    set -o pipefail
    systemctl stop substrate.service || true

    if [ -f /usr/local/bin/substrate-new ]; then
      cp /usr/local/bin/substrate-new /usr/local/bin/substrate
      chown substrate:substrate /usr/local/bin/substrate
      chmod a+x /usr/local/bin/substrate
    fi
    systemctl daemon-reload
    systemctl start substrate.service
  args:
    executable: /bin/bash
  changed_when: False

- name: check if keys already exist
  shell: |
    set -o pipefail
    if [ -d /home/substrate/.local/share/substrate/chains/{{ substrate_network_id }}/keystore ]; then
      ls /home/substrate/.local/share/substrate/chains/{{ substrate_network_id }}/keystore -1U | wc -l
    else
      mkdir -p /home/substrate/.local/share/substrate/chains/{{ substrate_network_id }}/
      chown -R substrate:substrate /home/substrate/.local/share/substrate
      echo 0
    fi
  args:
    executable: /bin/bash
  register: keystore_files
  changed_when: False

- name: initialize server keys
  uri:
    url: http://localhost:9933
    method: "POST"
    body_format: json
    body: |
      { "jsonrpc":"2.0", "method":"author_rotateKeys", "params":[], "id":1 }
  when: keystore_files.stdout == "0"
  register: rotate_keys

- name: show rotateKeys output
  debug:
    var: rotate_keys
  when: keystore_files.stdout == "0"

- name: save rotateKeys output
  copy:
    content: "{{ rotate_keys.json }}"
    dest: /home/substrate/rotate_keys.log
  when: keystore_files.stdout == "0"
